#+TITLE: ChatGPT.el

[[https://chat.openai.com/chat][ChatGPT]] in Emacs.

- [[https://www.youtube.com/watch?v=4oUrm4CnIjo][Basic Demo]]
- [[https://www.youtube.com/watch?v=1LMlt5Cv4fY][Queue Demo]]

** Installation
*** Dependency

#+begin_src shell
pip install git+https://github.com/mmabrouk/chatgpt-wrapper
#+end_src

#+begin_src shell
chatgpt install
#+end_src

This will prompt you to log in with your browser for the first time only.

NOTE: The setup should happen automatically first time you query, but it's a bit buggy. If you encounter any problems, please submit an issue or see [[https://github.com/mmabrouk/chatgpt-wrapper][chatgpt-wrapper]].

*** [[https://github.com/radian-software/straight.el][Straight]]
#+begin_src emacs-lisp
(use-package chatgpt
  :straight (:host github :repo "joshcho/ChatGPT.el" :files ("dist" "*.el"))
  :init
  (setq chatgpt-repo-path "~/.emacs.d/straight/repos/ChatGPT.el/")
  :bind ("C-c q" . chatgpt-query))
#+end_src

*** [[https://github.com/quelpa/quelpa][Quelpa]]
#+begin_src emacs-lisp
(require 'quelpa-use-package)
(use-package chatgpt
  :quelpa ((chatgpt :fetcher git :url "https://github.com/joshcho/ChatGPT.el.git") :upgrade t)
  :init
  (setq chatgpt-repo-path (expand-file-name "ChatGPT.el" quelpa-build-dir))
  :bind ("C-c q" . chatgpt-query))
#+end_src

** Usage
- Press ~C-c q~ to query ChatGPT.
- Select region before ~C-c q~ to query ChatGPT by type.
- You can queue queries one after another.
- If your login is expired, M-x chatgpt-login.

** Troubleshooting

- If you get a ~deferred error~ with "Browser closed" messages, try closing all firefox instances by doing "pkill firefox" in the shell. Then M-x ~chatgpt-reset~, followed by M-x chatgpt-query (or ~C-c q~).
- You can also try ~chatgpt-reset~ to debug any other issues.

** Customization
Customize ~chatgpt-query-types~ for your own types.

#+begin_src emacs-lisp
(setq chatgpt-query-types '(
                            ;; ChatGPT.el defaults
                            ("doc" . "Please write the documentation for the following function.\n\n%s")
                            ("bug" . "There is a bug in the following function, please help me fix it.\n\n%s")
                            ("understand" . "What does the following function do?\n\n%s")
                            ("improve" . "Please improve the following code.\n\n%s")
                            ;; your new prompt
                            ("my-custom-type" . "My custom prompt.\n\n%s")))
#+end_src

** Misc.
- Every query is part of a conversation, so it will learn based on what you ask.
- Don't use "custom" as a type. It's reserved for custom prepend string through minibuffer.
- Check out [[https://github.com/semiosis/pen.el][Pen.el]]
